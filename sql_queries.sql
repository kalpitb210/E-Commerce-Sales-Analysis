Use ecommerce;

-- List all unique cities where customers are located.
SELECT DISTINCT Customer_City FROM Customers;


-- Count the number of orders placed in 2017.
SELECT COUNT(*) "Number of Orders" from Orders WHERE YEAR(order_purchase_timestamp)=2017;


-- Count the Number of Customers from each state.
SELECT Customer_State, COUNT(*) FROM Customers GROUP BY Customer_State;


-- Calculate the percentage of orders that were paid in installments.
SELECT CONCAT((SUM(CASE WHEN payment_installments > 1 THEN 1 ELSE 0 END) / COUNT(*))*100, " %") 
	   AS Installment_Ratio
FROM Payments;


-- Find the total sales per Category.
SELECT 
	Upper(pro.product_category) "Category", 
	Round(SUM(pay.payment_value), 2) "Sales"
FROM products pro Join Order_items or_i 
ON pro.product_id = or_i.product_id Join payments pay 
ON pay.order_id = or_i.order_id
GROUP BY 
	Category;


-- Calculate the number of orders per month in 2018.
SELECT 
	MONTHNAME(order_purchase_timestamp) "Month", 
	COUNT(*) "Order_Count"
FROM Orders 
WHERE YEAR(order_purchase_timestamp)=2018
GROUP BY MONTHNAME(order_purchase_timestamp)
ORDER BY MONTHNAME(order_purchase_timestamp);


-- Find the Average number of products per order, grouped by customer city.
WITH Count_Per_Order AS 
(SELECT 
	ord.Order_id, 
	ord.Customer_id, 
	count(or_i.Order_id) AS "Order_Count"
FROM Orders ord Join Order_Items or_i ON ord.Order_id = or_i.Order_id
GROUP BY 
	ord.Order_id, ord.Customer_id)
SELECT c.customer_city, round(AVG(c1.Order_Count),2) "Average_orders"
FROM Customers c Join count_per_order c1
ON c.Customer_id = c1.Customer_id
GROUP BY c.Customer_city ORDER BY Average_orders DESC;


-- Calculate the percentage of total revenue contributed by each product category.
SELECT 
	Upper(pro.product_category) "Category", 
	Round((SUM(pay.payment_value)/(SELECT SUM(payment_value) FROM payments))*100,2) "Sales_Percentage"
FROM products pro Join Order_Items or_i 
ON pro.product_id = or_i.product_id Join payments pay 
ON pay.order_id = or_i.order_id
GROUP BY 
	Category 
ORDER BY 
	Sales_Percentage DESC;


-- Calculate the moving average of order values for each customer over their order history.
WITH temp AS
(SELECT ord.customer_id, ord.order_purchase_timestamp, 
pay.payment_value AS Payment 
FROM Payments pay Join Orders ord
ON pay.Order_id = ord.Order_id
)
SELECT 
	Customer_id, 
    Order_purchase_timestamp, 
	Payment,
	AVG(payment) OVER(PARTITION BY Customer_id ORDER BY Order_purchase_timestamp
			ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS Mov_avg
FROM
	temp;


-- Calculate the year-over-year growth rate of total sales.
WITH temp AS
(
SELECT 
	Year(ord.order_purchase_timestamp) AS "Years",
	Round(SUM(pay.payment_value), 2) AS "Payment" 
FROM Orders ord Join Payments pay
ON ord.order_id = pay.order_id
GROUP BY 
	Years 
ORDER BY 
	Years)
SELECT 
	Years, 
	((payment - LAG(payment, 1) OVER(ORDER BY Years))/ LAG(payment, 1) OVER(ORDER BY Years)) * 100 
    "Year ON Year % Growth" 
From temp;


-- Calculate the cumulative sales per month for each year.
WITH temp AS
(SELECT 
	Year(ord.order_purchase_timestamp) as "Years",
	Month(ord.order_purchase_timestamp) as "Months",
	Round(SUM(pay.payment_value), 2) as "Payment" 
FROM orders ord Join payments pay
ON ord.order_id = pay.order_id
GROUP BY 
	Years, Months 
ORDER BY 
	Years, Months)
    
SELECt 
	Years, 
    Months,
    Payment, 
    SUM(payment) OVER(ORDER BY Years, Months) "Cumulative_Sales"
FROM temp;


-- Identify the top 3 customers who spent the most money in each year.
WITH temp AS
(SELECT 
	Year(ord.order_purchase_timestamp) "Years",
	ord.customer_id "Customer_id",
	SUM(pay.payment_value) "Payment",
	Dense_Rank() OVER(PARTITION BY Year(ord.order_purchase_timestamp) 
						ORDER BY SUM(pay.payment_value) DESC) "ranking"
FROM orders ord JOin payments pay
ON pay.order_id = ord.order_id
GROUP BY 
	Year(ord.order_purchase_timestamp), ord.customer_id
)
SELECT 
	*
FROM temp 
WHERE ranking <= 3 ;


-- Calculate the total revenue generated by each seller, and rank them by revenue.
WITH temp AS
(SELECT 
	or_i.seller_id, 
    SUM(pay.payment_value) "Revenue" 
FROM order_items or_I Join payments pay
ON or_i.order_id = pay.order_id
GROUP BY or_i.seller_id)
SELECT 
	*, 
    Dense_Rank() OVER(ORDER BY Revenue DESC) "Ranking"
FROM temp;


-- Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
WITH temp1 AS 
(SELECT 
	c.customer_id,
    MIN(ord.order_purchase_timestamp) "First_Order"
FROM customers c Join orders ord
ON c.customer_id = ord.customer_id
GROUP BY 
	c.customer_id)
,
Temp2 AS 
(SELECT 
	temp1.customer_id, 
	COUNT(DISTINCT ord.order_purchase_timestamp) "Next_ord"
FROM temp1 Join orders ord
ON ord.customer_id = temp1.customer_id AND ord.order_purchase_timestamp > First_Order
							AND ord.order_purchase_timestamp < Date_Add(FIRST_ORDER, INTERVAL 6 MONTH)
GROUP BY 
	Temp1.customer_id) 

SELECT (Count(DISTINCT temp1.customer_id)/Count(DISTINCT temp2.customer_id)) * 100 "Customer Count"
FROM temp1 LEFT Join temp2 
ON temp1.customer_id = temp2.customer_id;


-- Identify the correlation between product price and the number of times a product has been purchased.
SELECT 
	pro.product_category, 
	Count(or_i.product_id) "No. Times Product has been purchased", 
	Round(AVG(or_i.Price), 2) "Product_Price"
FROM products pro Join Order_items or_i
ON pro.product_id = or_i.product_id
GROUP BY 
	pro.product_category;
 



